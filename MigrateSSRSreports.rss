' To use the script:
' 1) Donwload ssrs_migration.rss
' 2) Open a command prompt and navigate to the folder containing UpdateSSRSreports.rss, for example c:\rss
' 3) Run the following command (in one line):
'			rs.exe -i UpdateSSRSreports.rss -e Mgmt2010
'
' 			-s SOURCE_URL						'URL of the source RS server.
'			-u domain\username -p password				'Credentials for source server. OPTIONAL, default credentials are used if missing.
'			-v st="SITE"						'Specifies SharePoint site, in case source server is in SharePoint integrated mode
'			-v f="SOURCEFOLDER"					'Set to "/" for migrating everything, or to something like "/folder/subfolder" for partial migration. Everything within this folder will be copied. OPTIONAL, default is "/".
'
'			-v ts="TARGET_URL" 					'URL of the target RS server"
'			-v tu="domain\username" -v tp="password"		'Credentials for target server. OPTIONAL, default credentials are used if missing.
'			-v tst="SITE"						'Specifies SharePoint site, in case target server is in SharePoint integrated mode
'			-v tf="TARGETFOLDER"					'Set to "/" for migrating into the root level, or to something like "/folder/subfolder" for copying into some folder, which must be already existing. Everything within "SOURCEFOLDER" will be copied into "TARGETFOLDER". OPTIONAL, default is "/".
'			-v security= "True/False"				'If set to “False”, destination catalog items will inherit security setting according to the settings of the target system. Default is false.

'			-v dbServer = "Target DB Server"	'Specify the name of the database server on the target report server. In conjunction with dbName, this will be used to remap the datasource of each report.
'			-v dbName = "Target DB name"		'Specify the name of the database on the target report server.
'			-v dbSQLlogin = "SQL login name"	'Specify the SQL login to use for datasource.
'			-v dbSQLPass = "SQL login password"	'Specify the password for the SQL login.
'			-v nf = "New Target Folder"			'Specify a new folder name to create on the target report server. If it already exists, info message given and processing will continue.
'			-v repId = "Report Id"				'Specify a report name/id if you only want to update/create one particular report. Not specifying or a blank string updates all reports ffrom source folder.
'			-
'Examples:
'rs.exe -i UpdateSSRSreports.rss -e Mgmt2010 -s http://localhost/ReportServer -v f="DevelFolder" -v ts="http://other/ReportServer" -v tf="LiveFolder" -v dbServer="other\local" -v dbName="LiveDB" -v dbSQLlogin="sa" -v dbSQLPass="xxxxx"
'rs.exe -i UpdateSSRSreports.rss -e Mgmt2010 -s http://localhost/ReportServer -u myServer\myUserName -p myPassword -v f="/OtherDevelFolder" -v ts="http://otherComputer/ReportServer" -v repId="3002" -v tf="/OtherLiveFolder" -v nf="OtherLiveFolder" -v dbServer="localhost" -v dbName="OtherLiveDB" -v dbSQLlogin="sa" -v dbSQLPass="xxxxx"

Private RsSrc As ReportingService2010
Private SrcProtocol As String = "http"	
Private SrcServer As String 				
Private SrcIsNative As Boolean 						
Private SrcSite As String = ""	
Private SrcFolder As String = "/"					
Private NewFolder As String = ""
Private ReportId As String = ""

Private RsSnk As ReportingService2010
Private SnkProtocol As String = "http"				
Private SnkServer As String 						
Private SnkIsNative As Boolean 
Private SnkSite As String = ""							
Private SnkFolder As String = "/"		

Private MigrateSecurity As Boolean = False

Private srcItems() As CatalogItem = Nothing
Private snkItems() As CatalogItem = Nothing
Private schedules As Schedule() = Nothing
Private roles As Role() = Nothing
Private policies As Policy() = Nothing

Private srcSiteUrl As String = Nothing
Private snkSiteUrl As String = Nothing

''''''''''''''''''''''''''''''''''''''''''''''
Sub Main()

	InitializeVariables()

	Console.Write("Retrieve and report the list of items that will be migrated. " + Environment.NewLine)
	
	If MigrateSecurity And SrcIsNative And SnkIsNative Then	 'Roles and Policies are only migrated from native to native
		Console.WriteLine(Environment.NewLine + "Retrieving roles: ")
		roles = RsSrc.ListRoles("All", srcSiteUrl)
		For Each r As Role In roles
			Console.ForegroundColor = ConsoleColor.DarkGray
			Console.WriteLine("Role: " + r.Name)
			Console.ResetColor()
		Next
		
		Console.WriteLine(Environment.NewLine + "Retrieving system policies: ")
		policies = RsSrc.GetSystemPolicies()
		For each p as Policy in policies
			Console.ForegroundColor = ConsoleColor.DarkGray
			Console.WriteLine("System policy: " + p.GroupUserName)
			Console.ResetColor()
		Next
	End If
	
	'Console.WriteLine(Environment.NewLine + "Retrieving catalog items. This may take a while.")
	Dim timeout As Integer = RsSrc.Timeout
	RsSrc.Timeout = 600000 '10 minutes
	srcItems = RsSrc.ListChildren(GetSrcFolderPath(), True) 'Possible catalog item types: Model, Dataset, Component, Resource, DataSource, Folder, Report
	RsSrc.Timeout = timeout
	
	For Each ci As CatalogItem In srcItems
		If SrcIsNative And ci.Path.Contains("Users Folders") Then
			Continue For
		End If

		If(ReportId <> "" And ci.Name <> ReportId)
			Continue For
		End If

		Console.ForegroundColor = ConsoleColor.DarkGray
		Console.WriteLine(ci.TypeName + ": " + ci.Path)	
		Console.ResetColor()
	Next

	Try
		Try
			RsSnk.CreateFolder(NewFolder,"/",Nothing)
		Catch ex As Exception
			Console.ForegroundColor = ConsoleColor.Yellow
			Console.WriteLine("Folder already exists" + Environment.NewLine)
			Console.ResetColor()
		End Try

		If srcItems Is Nothing OrElse srcItems.Length = 0 Then
			Console.WriteLine("No catalog items were retrieved. Nothing more to do here.")
			Return
		End If							
		
		snkItems = New CatalogItem(srcItems.Length - 1) {}

		'Migrate Catalog Items
		For i As Integer = 0 To srcItems.Length - 1	

				If(ReportId <> "" And srcItems(i).Name <> ReportId)
					Continue For
				End If

			If SrcIsNative And srcItems(i).Path.Contains("Users Folders") Then
				Continue For
			End If
		
			If srcItems(i).TypeName = "Folder" Then
				snkItems(i) = MigrateFolder(srcItems(i))
			ElseIf srcItems(i).TypeName = "DataSource" Then
				snkItems(i) = MigrateDataSource(srcItems(i))
			ElseIf Not srcItems(i).TypeName = "LinkedReport" Then
				snkItems(i) = MigrateCatalogItem(srcItems(i))
			End If
		Next
		
		'Relink Catalog Items (only applicable for (Linked) Reports, Models and Data Sources)
		For i As Integer = 0 To srcItems.Length - 1
			If SrcIsNative And srcItems(i).Path.Contains("Users Folders") Then
				Continue For
			End If
		
			If Not snkItems(i) Is Nothing And (srcItems(i).TypeName = "Model" Or srcItems(i).TypeName = "Report") Then
				RelinkDataSources(snkItems(i), srcItems(i))
			End If

			If Not snkItems(i) Is Nothing And (srcItems(i).TypeName = "Report" Or srcItems(i).TypeName = "DataSet") Then
				RelinkItemReferences(snkItems(i), srcItems(i))
			End If

			If srcItems(i).TypeName = "LinkedReport" And SnkIsNative Then
				snkItems(i) = MigrateLinkedReport(srcItems(i)) 'Migrating a linked report is like relinking
			End If
		Next

		'Migrate items' artefacts
		For i As Integer = 0 To srcItems.Length - 1
			If SrcIsNative And srcItems(i).Path.Contains("Users Folders") Then
				Continue For
			End If
			If (srcItems(i).TypeName = "Report" Or srcItems(i).TypeName = "LinkedReport") And Not snkItems(i) Is Nothing Then
				MigrateReportParameters(snkItems(i), srcItems(i))
			End If

			If MigrateSecurity And Not snkItems(i) Is Nothing Then
				MigrateItemPolicies(snkItems(i), srcItems(i))
			End If
		Next

		Console.WriteLine("--- END OF OUTPUT ---")
	Catch ex As Exception
		Console.ForegroundColor = ConsoleColor.Red
		Console.WriteLine(ex.Message + Environment.NewLine)
		Console.ResetColor()
	End Try
End Sub

'''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''' Initialize variables'''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''
Sub InitializeVariables()
	RsSrc = rs
	Dim pi as Integer = rs.Url.IndexOf("://")
	If Not pi = -1 Then
		SrcProtocol = rs.Url.Substring(0, pi)
		SrcServer = rs.Url.Substring(pi+3)		
	End If
	SrcServer = SrcServer.Substring(0, SrcServer.IndexOf("/"))
	SrcIsNative = Not rs.Url.Contains("/_vti_bin")

	If Not Me.GetType().GetField("nf") Is Nothing Then
		NewFolder = Me.GetType().GetField("nf").GetValue(Me)
	End If

	If Not Me.GetType().GetField("repId") Is Nothing Then
		ReportId = Me.GetType().GetField("repId").GetValue(Me)
	End If

	If Not Me.GetType().GetField("st") Is Nothing Then
		SrcSite = Me.GetType().GetField("st").GetValue(Me)
	End If	
	If SrcSite = "/" Then
		SrcSite = ""
	End If
	If Not SrcSite.StartsWith("/") And Not SrcSite = "" Then
		SrcSite = "/" + SrcSite
	End If
	
	If Not Me.GetType().GetField("f") Is Nothing Then
		SrcFolder = Me.GetType().GetField("f").GetValue(Me)
	End If	
	If Not SrcFolder.StartsWith("/") And Not SrcFolder = "/" Then
		SrcFolder = "/" + SrcFolder
	End If
	
	SrcFolder = SrcSite + SrcFolder
	
	RsSnk = New ReportingService2010()
	If Me.GetType().GetField("tu") Is Nothing Then
		RsSnk.Credentials = System.Net.CredentialCache.DefaultCredentials
	Else
		Dim user As String = Me.GetType().GetField("tu").GetValue(Me)
		Dim password As String = Me.GetType().GetField("tp").GetValue(Me)

		If user.contains("\") Then			
			Dim domainuser As String() = user.Split(New [Char]() {"\"c}) 
			RsSnk.Credentials = New System.Net.NetworkCredential(domainuser(1), password, domainuser(0))	
		Else
			RsSnk.Credentials = New System.Net.NetworkCredential(user, password)		
		End If
	End If
	RsSnk.Url = ts + "/reportservice2010.asmx"

	pi = RsSnk.Url.IndexOf("://")
	If Not pi = -1 Then
		SnkProtocol = RsSnk.Url.Substring(0, pi)
		SnkServer = RsSnk.Url.Substring(pi+3)		
	End If
	SnkServer = SnkServer.Substring(0, SnkServer.IndexOf("/"))
	SnkIsNative = Not RsSnk.Url.Contains("/_vti_bin")
	
	If Not Me.GetType().GetField("tst") Is Nothing Then
		SnkSite = Me.GetType().GetField("tst").GetValue(Me)
	End If	
	If SnkSite = "/" Then
		SnkSite = ""
	End If
	If Not SnkSite.StartsWith("/") And Not SnkSite = "" Then
		SnkSite = "/" + SnkSite
	End If
	
	If Not Me.GetType().GetField("tf") Is Nothing Then
		SnkFolder = Me.GetType().GetField("tf").GetValue(Me)
	End If	
	If Not SnkFolder.StartsWith("/") And Not SnkFolder = "/" Then
		SnkFolder = "/" + SnkFolder
	End If
	
	If Not Me.GetType().GetField("security") Is Nothing Then
		MigrateSecurity = (Me.GetType().GetField("security").GetValue(Me).ToLower = "true")
	End If	
	
	SnkFolder = SnkSite + SnkFolder
	
	srcSiteUrl = IIf(SrcIsNative, Nothing, SrcProtocol + "://" + SrcServer + SrcSite)
	snkSiteUrl = IIf(SnkIsNative, Nothing, SnkProtocol + "://" + SnkServer + SnkSite)
End Sub

'''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''' Migrate Catalog Items'''''''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''
Function MigrateFolder(srcItem As CatalogItem) As CatalogItem

	Console.Write("Migrating " + srcItem.TypeName + ": " + srcItem.Path)
	Dim result As CatalogItem = Nothing
	Try
		Dim path As String = GetSnkPath(srcItem.Path.Substring(0, srcItem.Path.LastIndexOf("/")))
		result = RsSnk.CreateFolder(srcItem.Name, path, Nothing)
		WriteSuccess()
	Catch ex As Exception
		Console.ForegroundColor = ConsoleColor.Red
		Console.WriteLine(" ... FAILURE:")
		Console.WriteLine(ex.Message + Environment.NewLine)
		Console.ResetColor()
	End Try
	Return result
End Function

Function MigrateDataSource(srcItem As CatalogItem) As CatalogItem

	Console.Write("Migrating " + srcItem.TypeName + ": " + srcItem.Path)
	Dim result As CatalogItem = Nothing
	Try
		Dim definition As DataSourceDefinition = RsSrc.GetDataSourceContents(srcItem.Path)
		Dim Name As String = GetSnkFilename(srcItem.Name, srcItem.TypeName)
		Dim Parent As String = GetSnkPath(srcItem.Path.Substring(0, srcItem.Path.LastIndexOf("/")))
		result = RsSnk.CreateDataSource(Name, Parent, True, definition, Nothing)
		WriteSuccess()
		
	Catch ex As Exception
		Console.ForegroundColor = ConsoleColor.Red
		Console.WriteLine(" ... FAILURE:")
		Console.WriteLine(ex.Message + Environment.NewLine)
		Console.ResetColor()
	End Try
	Return result
End Function

Function MigrateLinkedReport(srcItem As CatalogItem) As CatalogItem

	Console.Write("Migrating " + srcItem.TypeName + ": " + srcItem.Path)
	Dim result As CatalogItem = Nothing
	Try
		Dim name As String = GetSnkFilename(srcItem.Name, srcItem.TypeName)
		Dim parent As String = GetSnkPath(srcItem.Path.Substring(0, srcItem.Path.LastIndexOf("/")))
		Dim link As String = RsSrc.GetItemLink(srcItem.Path)

		RsSnk.CreateLinkedItem(name, parent, GetSnkPath(link), Nothing)

		result = New CatalogItem
		result.CreatedBy = srcItem.CreatedBy
		result.CreationDate = srcItem.CreationDate
		result.CreationDateSpecified = srcItem.CreationDateSpecified
		result.Description = srcItem.Description
		result.Hidden = srcItem.Hidden
		result.HiddenSpecified = srcItem.HiddenSpecified
		result.ID = srcItem.ID
		result.ItemMetadata = srcItem.ItemMetadata
		result.ModifiedBy = srcItem.ModifiedBy
		result.ModifiedDate = srcItem.ModifiedDate
		result.ModifiedDateSpecified = srcItem.ModifiedDateSpecified
		result.Name = name
		result.Path = IIf(parent = "/", "", parent) + "/" + name
		result.Size = srcItem.Size
		result.SizeSpecified = srcItem.SizeSpecified
		result.TypeName = srcItem.TypeName
		result.VirtualPath = Nothing
		WriteSuccess()
	Catch ex As Exception
		Console.ForegroundColor = ConsoleColor.Red
		Console.WriteLine(" ... FAILURE:")
		Console.WriteLine(ex.Message + Environment.NewLine)
		Console.ResetColor()
	End Try
	Return result
End Function

Function MigrateCatalogItem(srcItem As CatalogItem) As CatalogItem

	Console.Write("Migrating " + srcItem.TypeName + ": " + srcItem.Path)
	Dim result As CatalogItem = Nothing
	Try
		Dim definition As Byte() = RsSrc.GetItemDefinition(srcItem.Path)

		Dim propertiesTemplate() As [Property] = New [Property](3) {}
		propertiesTemplate(0) = New [Property]
		propertiesTemplate(0).Name = "MIMEType"
		propertiesTemplate(1) = New [Property]
		propertiesTemplate(1).Name = "ReportTimeout"
		propertiesTemplate(2) = New [Property]
		propertiesTemplate(2).Name = "Hidden"
		propertiesTemplate(3) = New [Property]
		propertiesTemplate(3).Name = "Description"

		Dim properties As [Property]() = RsSrc.GetProperties(srcItem.Path, propertiesTemplate)

		Dim warnings() As Warning = Nothing

		result = RsSnk.CreateCatalogItem(srcItem.TypeName, GetSnkFilename(srcItem.Name, srcItem.TypeName), GetSnkPath(srcItem.Path.Substring(0, srcItem.Path.LastIndexOf("/"))), True, definition, properties, warnings)
		WriteSuccess()

		If Not warnings Is Nothing Then
			Console.ForegroundColor = ConsoleColor.Yellow
			Console.WriteLine("")
			For Each w As Warning In warnings
				If w.Code <> "rsDataSourceReferenceNotPublished" And w.Code <> "rsDataSetReferenceNotPublished" Then	'This should be fine after re-linking
					Console.WriteLine("Warning: " + w.Message)
				End If
			Next
			Console.ResetColor()
		Else
			Console.WriteLine("")
		End If

	Catch ex As Exception
		Console.ForegroundColor = ConsoleColor.Red
		Console.WriteLine(Environment.NewLine + ex.Message + Environment.NewLine)
		Console.ResetColor()
	End Try
	Return result
End Function

'Re-link DataSources of a Report or a Model
Sub RelinkDataSources(snkReport As CatalogItem, srcReport As CatalogItem)
	Console.Write("Re-linking data source for item " + snkReport.Name)
	Try
		Dim srcDataSources As DataSource() = RsSrc.GetItemDataSources(srcReport.Path)
		If srcDataSources Is Nothing Then
			Return
		End If

		Dim snkDataSources As System.Collections.Generic.List(Of DataSource) = New System.Collections.Generic.List(Of DataSource)

		For Each srcDS As DataSource In srcDataSources

			If TypeOf srcDS.Item Is DataSourceReference And Not srcReport.TypeName = "Report" Then 'Report references are migrated with RelinkItemReferences
				Dim snkDSRef As DataSourceReference = New DataSourceReference
				Dim srcDSRef As DataSourceReference = srcDS.Item

				snkDSRef.Reference = GetSnkFilename(GetSnkPath(srcDSRef.Reference), "DataSource")
				Dim snkDS As DataSource = New DataSource
				snkDS.Name = srcDS.Name
				snkDS.Item = snkDSRef
				snkDataSources.Add(snkDS)
			ElseIf TypeOf srcDS.Item Is DataSourceDefinition Then
				Dim dataSourceDefinition = srcDS.Item
				If Me.GetType().GetField("dbSQLlogin").GetValue(Me).Length() > 0 Then
					dataSourceDefinition.UserName = Me.GetType().GetField("dbSQLlogin").GetValue(Me)
					dataSourceDefinition.Password = Me.GetType().GetField("dbSQLPass").GetValue(Me)
					dataSourceDefinition.CredentialRetrieval = CredentialRetrievalEnum.Store
				Else
					dataSourceDefinition.CredentialRetrieval = CredentialRetrievalEnum.Integrated
				End If
				Dim dataBaseServer = Me.GetType().GetField("dbServer").GetValue(Me)
				Dim dataBaseName = Me.GetType().GetField("dbName").GetValue(Me)
				dataSourceDefinition.ConnectString="Data Source=" + dataBaseServer + ";Initial Catalog=" + dataBaseName + ";"
				snkDataSources.Add(srcDS)
			End If
		Next

		If snkDataSources.Count > 0 Then
			RsSnk.SetItemDataSources(snkReport.Path, snkDataSources.ToArray)
		End If
		WriteSuccess()
	Catch ex As Exception
		Console.ForegroundColor = ConsoleColor.Red
		Console.WriteLine(" ... FAILURE:")
		Console.WriteLine(ex.Message + Environment.NewLine)
		Console.ResetColor()
	End Try
End Sub

'Re-link items's references
Sub RelinkItemReferences(snkItem As CatalogItem, srcItem As CatalogItem)
	Console.Write("Re-linking references for item " + snkItem.Name)

	Try
		Dim srcReferences As ItemReferenceData() = RsSrc.GetItemReferences(srcItem.Path, Nothing)

		If srcReferences Is Nothing Then
			Return
		End If

		Dim snkReferences As System.Collections.Generic.List(Of ItemReference) = New System.Collections.Generic.List(Of ItemReference)

		For Each srcRef As ItemReferenceData In srcReferences
			Dim type As String = RsSrc.GetItemType(srcRef.Reference)
			Dim snkRef As ItemReference = New ItemReference
			snkRef.Name = srcRef.Name
			snkRef.Reference = GetSnkFilename(GetSnkPath(srcRef.Reference), type)

			snkReferences.Add(snkRef)
		Next

		If snkReferences.Count > 0 Then
			RsSnk.SetItemReferences(snkItem.Path, snkReferences.ToArray)
		End If

		WriteSuccess()
	Catch ex As Exception
		Console.ForegroundColor = ConsoleColor.Red
		Console.WriteLine(" ... FAILURE:")
		Console.WriteLine(ex.Message + Environment.NewLine)
		Console.ResetColor()
	End Try
End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''' Migrate report artefacts ''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''' 
'Migrate report's parameter settings
Sub MigrateReportParameters(snkReport As CatalogItem, srcReport As CatalogItem)
	Console.Write("Migrating parameters for report " + snkReport.Name)

	Try
		Dim srcParameters As ItemParameter() = RsSrc.GetItemParameters(srcReport.Path, Nothing, False, Nothing, Nothing)

		If srcParameters Is Nothing OrElse srcParameters.Length = 0 Then
			Console.WriteLine(" 0 items found.")
			Return
		End If

		RsSnk.SetItemParameters(snkReport.Path, srcParameters)
		WriteSuccess()
	Catch ex As Exception
		Console.ForegroundColor = ConsoleColor.Red
		Console.WriteLine(" ... FAILURE:")
		Console.WriteLine(ex.Message + Environment.NewLine)
		Console.ResetColor()
	End Try
End Sub

'Migrate report's policies
Sub MigrateItemPolicies(snkReport As CatalogItem, srcReport As CatalogItem)
	Console.Write("Migrating policies for item " + snkReport.Name)

	Try
		Dim inheritParent As Boolean = False
		Dim policies As Policy() = RsSrc.GetPolicies(srcReport.Path, inheritParent)

		If Not inheritParent And policies Is Nothing Then
			Console.WriteLine(" ...0 items found.")
			Return
		End If

		If Not inheritParent Then
			Dim mappedPolicies As Policy() = MapPolicies(policies)
			If mappedPolicies.Length > 0 Then
				RsSnk.SetPolicies(snkReport.Path, mappedPolicies)
			End If
		End If
				
		WriteSuccess()
	Catch ex As Exception
		Console.ForegroundColor = ConsoleColor.Red
		Console.WriteLine(" ... FAILURE:")
		Console.WriteLine(ex.Message + Environment.NewLine)
		Console.ResetColor()
	End Try
End Sub


'''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''''''''''''' Helper Functions '''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''' 

'Helper function to construct correctly formatted path
Function GetSnkPath(srcPath As String) As String
	If Not SrcIsNative Then
		srcPath = srcPath.Replace(SrcProtocol + "://" + SrcServer, "")
	End If

	Dim snkPath As String = SnkFolder

	If Not srcPath = "" Then
		snkPath = snkPath + IIf(SrcFolder = "/", srcPath, srcPath.Remove(0, SrcFolder.Length))
	End If

	If snkPath.StartsWith("//") Then
		snkPath = snkPath.Substring(1)
	End If

	If Not SnkIsNative Then
		snkPath = SnkProtocol + "://" + SnkServer + snkPath
	End If

	Return snkPath
End Function

'Helper function to construct correctly formatted filename
Function GetSnkFilename(srcFilename As String, type As String) As String
	Dim hasFE As Boolean = HasFileExtension(srcFilename)
	If SnkIsNative And hasFE And Not GetExtension(type) = "" Then 'Cut off file extension, if present            
		srcFilename = RemoveFileExtension(srcFilename)

	ElseIf Not SnkIsNative And Not hasFE Then 'Add file extension, if not present
		srcFilename = srcFilename + GetExtension(type)
	End If

	Return srcFilename
End Function

'Helper
Function HasFileExtension(filename As String) As Boolean
	Dim index As Integer = filename.LastIndexOf(".")
	Return index >= 0 And filename.Length - index <= 5
End Function

'Helper
Function RemoveFileExtension(filename As String) As String
	Dim index As Integer = filename.LastIndexOf(".")
	Return filename.Substring(0, index)
End Function

'Helper function to construct correctly formatted path
Function GetSrcFolderPath() As String
	Return IIf(SrcIsNative, SrcFolder, SrcProtocol + "://" + SrcServer + SrcFolder)
End Function

'Returns the file extension for a given type
Function GetExtension(type As String) As String
	Dim ext As String = ""
	If type = "Report" Then
		ext = ".rdl"
	ElseIf type = "DataSource" Then
		ext = ".rsds"
	ElseIf type = "Component" Then
		ext = ".rsc"
	ElseIf type = "DataSet" Then
		ext = ".rsd"
	ElseIf type = "Model" Then
		ext = ".smdl"
	End If
	Return ext
End Function

Function GetMatchData(matchData As String, RsSnk As ReportingService2010) As String
	Dim name As String = Nothing
	For Each s As Schedule In schedules
		If s.ScheduleID = matchData Then
			name = s.Name
		End If
	Next
	If name = Nothing Then
		Return matchData
	End If

	Dim snkSchedules As Schedule() = RsSnk.ListSchedules(snkSiteUrl)
	For Each s As Schedule In snkSchedules 
		If s.Name = name Then
			Return s.ScheduleID
		End If
	Next
	
	Return matchData
End Function

Function MapPolicies(policies As Policy()) As Policy()
	If(SrcIsNative = SnkIsNative) Then
		Return policies
	End If
	
	Dim mappedPolicies As System.Collections.Generic.List(Of Policy) = New System.Collections.Generic.List(Of Policy)
	
	For i As Integer = 0 To policies.Length - 1
		Dim mappedPolicy As Policy = new Policy
		mappedPolicy.GroupUserName = policies(i).GroupUserName
		mappedPolicy.Roles = MapRoles(policies(i).Roles)
		If mappedPolicy.Roles.Length > 0 Then
			mappedPolicies.Add(mappedPolicy)
		End If
	Next

	Return mappedPolicies.ToArray
End Function

Function MapRoles(roles As Role()) As Role()
		
	Dim mappedRoles As System.Collections.Generic.List(Of Role) = New System.Collections.Generic.List(Of Role)
	
	For i As Integer = 0 To roles.Length - 1
		Dim mappedRole As Role = new Role
		mappedRole.Name = MapRole(roles(i).Name)
		
		Try
			Dim taskIds As String() = RsSnk.GetRoleProperties(mappedRole.Name, snkSiteUrl, mappedRole.Description)
			mappedRoles.Add(mappedRole)
		Catch e as Exception
			Console.ForegroundColor = ConsoleColor.Yellow
			Console.WriteLine("Dropping '" + mappedRole.Name + ", which doesn't exist on the target server")
			Console.ResetColor()			
		End Try		
	Next	
	
	Return mappedRoles.ToArray
End Function

Function MapRole(roleName As String) As String	'These mapping rules may be adjusted to fit specific scenarios
	If SrcIsNative = SnkIsNative Then
		Return roleName
	Else If SrcIsNative Then 'Native to SP
		Select roleName 	
			Case "Content Manager"
				Return "Owners"
			Case "Publisher"
				Return "Members"
			Case "Browser"
				Return "Visitors"
		End Select
	Else If SnkIsNative Then 'SP to Native
		Select roleName 	
			Case "Owners"
				Return "Content Manager"
			Case "Members"
				Return "Publisher"
			Case "Visitors"
				Return "Browser"
		End Select
	End If	
	Return roleName
End Function

Function IIf(cond As Boolean, val1 As String, val2 As String) As String
	If cond Then
		Return val1
	Else
		Return val2
	End If
End Function

Sub WriteSuccess()
	Console.ForegroundColor = ConsoleColor.Green
	Console.WriteLine(" ... SUCCESS")
	Console.ResetColor()
End Sub
